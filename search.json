[{"path":"https://jefflansing.github.io/spantreeorbits/articles/Automorphism_Groups.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Automorphism_Groups","text":"goal vignette generate automorphism groups correspond alignments described Pair_Alignment vignette.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/articles/Automorphism_Groups.html","id":"alignment-of-the-tetrahedron-and-the-dual-tetrahedron","dir":"Articles","previous_headings":"","what":"Alignment of the Tetrahedron and the Dual Tetrahedron","title":"Automorphism_Groups","text":"tetrahedron dual tetrahedron aligned neighbor map rhombic dodecahedron, maps vertices tetrahedron vertices dual tetrahedron based connection edges, identifed octahedron. table 3 aspects: () left 2 columns ids vertices tetrahedron, (ii) right 2 columns ids vertices dual tetrahedron, (iii) 6 rows, show alignment. 3 aspects neighbor map associated automorphism group. left 2 columns map represented adjacency matrix, can used (GAP GRAPE package) create automorphism graph. GAP code, create automorpnism group, arrange elements group conjugacy class, identify elements strong generators group. Next look right half neighbor map. see right 2 columns map adjacency matrix representation left 2 columns, technique used get distinct automorphism group dual tetrahedron. return issue . First create automorphism group octahedron, using technique . convert octahedron adjacency matrix GAP list lists, call “”. can plugged call GAP. case adjacency matrix 6×66 \\times 6 matrix. use generate group. Returning automorphism group dual tetrahedron, can proceed follows: Copy group definition compute normal subgroups group identify 2 normal subgroups want use (already know isomorphic S4S_4) make sure really different groups identify 2 copies S4S_4 third fourth items list normal subgroups. evident two copies S4S_4 different, union behaves differently intersection. (2 copies , union intersection also .) following element table shows another view idea. C2xS4 normal subgroups: green C2xA4, red A4, blue S4 left, beige S4 right. Identifiers based conjugacy classes. element table used following GAP code. can start analyze element table looking distribution conjugacy classes among normal subgroups. Distribution conjugacy classes generators normal subgroups C2xS4 fact generators S4S_4 subgroups interesting, seen another vignette.","code":"rad_map <- rhombic_dodecahedron$nghmap am_left <- rhombic_dodecahedron$nghmap[,1:2] %>% edgelist_to_adjmat() #> [1] \"The left polyhedron has 16 spanning trees\" am_rt <- rhombic_dodecahedron$nghmap[,3:4] %>% edgelist_to_adjmat() #> [1] \"The right polyhedron has 16 spanning trees\" am_oct <- octahedron$faces %>% apply(1, function(rw) {       rw[c(1,2,2,3,3,1)] #get the edges around each face     }) %>% as.integer() %>% matrix(byrow = T, ncol = 2) %>% #combine them in a matrix     get_set() %>% as.list() %>% unlist() %>% # remove duplicates   matrix(byrow = T, ncol = 2) %>% edgelist_to_adjmat() # and convert to an adjacency matrix #> [1] \"The octahedron has 384 spanning trees\" am <- am_oct %>% apply(1, function(rw) {      str_c(rw, collapse = ',') %>% str_c('[', ., ']')   }) %>% str_c(collapse = ',') %>% str_c('A := [', ., '];;gamma := Graph( Group(()), [1..6], OnPoints, function(x,y) return A[x][y]=1;; end, true );;ag := AutGroupGraph( gamma );') am #> [1] \"A := [[0,1,1,1,1,0],[1,0,1,0,1,1],[1,1,0,1,0,1],[1,0,1,0,1,1],[1,1,0,1,0,1],[0,1,1,1,1,0]];;gamma := Graph( Group(()), [1..6], OnPoints, function(x,y) return A[x][y]=1;; end, true );;ag := AutGroupGraph( gamma );\""},{"path":"https://jefflansing.github.io/spantreeorbits/articles/Automorphism_Groups.html","id":"alignment-of-the-cube-and-the-octahedron","dir":"Articles","previous_headings":"","what":"Alignment of the Cube and the Octahedron","title":"Automorphism_Groups","text":", 3 aspects neighbor map associated automorphism group. convert cuboctahedron adjacency matrix GAP list lists, call “”. can plugged call GAP.","code":"am_dit_lf <- deltoidal_icositetrahedron$nghmap[,1:2] %>% edgelist_to_adjmat() #> [1] \"The left polyhedron has 384 spanning trees\" am_dit_rt <- deltoidal_icositetrahedron$nghmap[,3:4] %>% edgelist_to_adjmat() #> [1] \"The right polyhedron has 384 spanning trees\" am_co <- c(     cuboctahedron$cu_faces %>% apply(1, function(rw) {       rw[c(1,2,2,3,3,4,4,1)]     }) %>% as.integer(),     cuboctahedron$oct_faces %>% apply(1, function(rw) {       rw[c(1,2,2,3,3,1)]     }) %>% as.integer()   ) %>% matrix(byrow = T, ncol = 2) %>% get_set() %>%      as.list() %>% unlist() %>%  matrix(byrow = T, ncol = 2) %>% edgelist_to_adjmat() #> [1] \"The cuboctahedron has 331776 spanning trees\" am <- am_co %>% apply(1, function(rw) {      str_c(rw, collapse = ',') %>% str_c('[', ., ']')   }) %>% str_c(collapse = ',') %>% str_c('A := [', ., '];;gamma := Graph( Group(()), [1..12], OnPoints, function(x,y) return A[x][y]=1;; end, true );;ag := AutGroupGraph( gamma );') am #> [1] \"A := [[0,1,1,0,0,0,0,0,1,0,1,0],[1,0,0,1,1,0,0,0,0,0,1,0],[1,0,0,1,0,0,1,0,1,0,0,0],[0,1,1,0,1,0,1,0,0,0,0,0],[0,1,0,1,0,1,0,0,0,0,0,1],[0,0,0,0,1,0,1,1,0,0,0,1],[0,0,1,1,0,1,0,1,0,0,0,0],[0,0,0,0,0,1,1,0,1,1,0,0],[1,0,1,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,1,1,0,1,1],[1,1,0,0,0,0,0,0,0,1,0,1],[0,0,0,0,1,1,0,0,0,1,1,0]];;gamma := Graph( Group(()), [1..12], OnPoints, function(x,y) return A[x][y]=1;; end, true );;ag := AutGroupGraph( gamma );\""},{"path":"https://jefflansing.github.io/spantreeorbits/articles/Automorphism_Groups.html","id":"alignment-of-the-rhonbic-dodecahedron-and-the-cuboctahedron","dir":"Articles","previous_headings":"","what":"Alignment of the Rhonbic Dodecahedron and the Cuboctahedron","title":"Automorphism_Groups","text":", 3 aspects neighbor map associated automorphism group. convert rhombicuboctahedron adjacency matrix GAP list lists, call “”. can plugged call GAP.","code":"am_dtc_lf <- deltoidal_tetracontaoctahedron$nghmap[,1:2] %>% edgelist_to_adjmat() #> [1] \"The left polyhedron has 331776 spanning trees\" am_dtc_rt <- deltoidal_tetracontaoctahedron$nghmap[,3:4] %>% edgelist_to_adjmat() #> [1] \"The right polyhedron has 331776 spanning trees\" am_rco <- rhombicuboctahedron$edges %>% edgelist_to_adjmat() #> [1] \"The rhombicuboctahedron has 301056000000 spanning trees\" am <- am_rco %>% apply(1, function(rw) {      str_c(rw, collapse = ',') %>% str_c('[', ., ']')   }) %>% str_c(collapse = ',') %>% str_c('A := [', ., '];;gamma := Graph( Group(()), [1..24], OnPoints, function(x,y) return A[x][y]=1;; end, true );;ag := AutGroupGraph( gamma );') am #> [1] \"A := [[0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],[1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0],[0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0],[0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0],[1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0],[0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0],[0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1],[1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0]];;gamma := Graph( Group(()), [1..24], OnPoints, function(x,y) return A[x][y]=1;; end, true );;ag := AutGroupGraph( gamma );\""},{"path":"https://jefflansing.github.io/spantreeorbits/articles/Automorphism_Groups.html","id":"finally","dir":"Articles","previous_headings":"","what":"Finally","title":"Automorphism_Groups","text":"following GAP code used save information groups local directory. following R code used create R objects save GAP output. r objects copied data folder package.","code":"ElsByConjClass:=function(G)   local els,cc,c,x,gens;   gens := GeneratorsOfGroup(G);   cc := ConjugacyClasses(G);   els := [];   for c in cc do     for x in c do       Add(els, x);     od;   od;   return rec(names := ClassNames(CharacterTable(G)), sizes := List(cc, Size),    gens :=  List(gens, x -> Position(els, x)), elements := els); end;;  SaveGroup := function(G, path, pts)    local els, e;   els := ElsByConjClass(G);   LogTo(path);   Print(\"# \", StructureDescription(G), \"\\n# \", els.gens, \"\\n\");   P := PresentationViaCosetTable(G);; TzPrint(P);   Print(\"# \", els.names, \"\\n# \", els.sizes, \"\\n\");   for e in els.elements do   Print(ListPerm(e, pts),\"\\n\");   od;   LogTo();   return []; end;;  pr:=Group( [ (3,5), (2,3)(4,5), (1,2)(4,6) ] );; nsg:=NormalSubgroups(pr);; path := Filename(DirectoryCurrent(), \"r-projects/spantreeorbits/inst/extdata/\");  SaveGroup(nsg[1], Concatenation(path, \"oct_nsg1.txt\"), 6); SaveGroup(nsg[2], Concatenation(path, \"oct_nsg2.txt\"), 6); SaveGroup(nsg[3], Concatenation(path, \"oct_nsg3.txt\"), 6); SaveGroup(nsg[4], Concatenation(path, \"oct_nsg4.txt\"), 6); SaveGroup(nsg[6], Concatenation(path, \"oct_nsg6.txt\"), 6);  ps := Group( [ (3,7)(4,6), (2,4)(5,7), (1,2)(3,4)(5,8)(6,7) ] ); SaveGroup(ps, Concatenation(path, \"dic_lf.txt\"), 8);  pt := Group( [ (3,5), (2,3)(4,5), (1,2)(4,6) ] ); SaveGroup(pt, Concatenation(path, \"dic_rt.txt\"), 6);  pu := Group( [ ( 2, 3)( 5, 7)( 8,12)( 9,11), ( 2, 9)( 3,11)( 4,10)( 5, 8)( 7,12),    ( 1, 2)( 3, 4)( 5, 9)( 6, 8)(10,12) ] ); SaveGroup(pu, Concatenation(path, \"co.txt\"), 12);  pv := Group( [ ( 2, 3)( 4, 5)( 8, 9)(12,13), ( 1, 2)( 4, 6)( 8,10)(11,12),    ( 1, 5, 4)( 2, 6, 3)( 7, 8, 9)(12,13,14),    ( 1, 6)( 2, 3)( 4, 5)( 7,11)( 8,12)( 9,13)(10,14) ] ); SaveGroup(pv, Concatenation(path, \"dtc_lf.txt\"), 14);  pw := Group( [ ( 2, 3)( 5, 7)( 8,12)( 9,11), ( 2, 9)( 3,11)( 4,10)( 5, 8)( 7,12),    ( 1, 2)( 3, 4)( 5, 9)( 6, 8)(10,12) ] ); SaveGroup(pw, Concatenation(path, \"dtc_rt.txt\"), 12);  px := Group( [ ( 2, 7)( 3,22)( 4,19)( 6,15)( 8,10)( 9,16)(11,14)(12,20)(17,24)     (18,23), ( 1, 2, 5, 7)( 3, 4, 6, 8)( 9,14,18,12)(10,15,19,22)(11,16,20,23)     (13,17,21,24), ( 1, 3,22)( 2,19,23)( 4, 7,18)( 5,20,12)( 6,14,24)     ( 8,21,10)( 9,16,13)(11,15,17) ] ); SaveGroup(px, Concatenation(path, \"rco.txt\"), 24); convert_gap_to_r <- function(infile, pts) {   gaptext <- readLines(infile)    desc <- gaptext[1] %>% str_sub(3);   gens <- eval(parse(text = str_c(gaptext[2],collapse = '') %>%                         str_replace(\"# \\\\[\", \"c(\") %>%                         str_replace(\"\\\\]\", \")\")))   cn <-  eval(parse(text = str_c(gaptext[3],collapse = '') %>%                        str_replace(\"# \\\\[\", \"c(\") %>%                        str_replace(\"\\\\]\", \")\")))   ci <-  eval(parse(text = gaptext[4] %>% str_replace(\"# \\\\[\", \"c(\") %>%                        str_replace(\"\\\\]\", \")\")))   names <- c()   for(j in 1:length(ci)) {     names <- c(names, str_c(cn[j],'.',1:ci[j]))   }      mx <- gaptext[5:length(gaptext)] %>%      str_replace_all('(\\\\[|\\\\])', '') %>%     str_replace_all(' ', '') %>%      str_c(collapse = ',') %>% str_split_1(',') %>%      as.integer() %>% matrix(byrow = T, ncol = pts)     list(description = desc,       generators = gens,       ids = names,       elements = mx   ) } fnames <- rbind(   c(\"oct_nsg1.txt\",\"c2xs4_aut_oct\"),   c(\"oct_nsg2.txt\",\"c2xa4_oct\"),   c(\"oct_nsg3.txt\",\"s4lf_oct\"),   c(\"oct_nsg4.txt\",\"s4rt_oct\"),   c(\"oct_nsg6.txt\",\"as4_oct\"),   c(\"dic_lf.txt\",\"c2xs4_cu\"),   c(\"dic_rt.txt\",\"c2xs4_oct\"),   c(\"co.txt\",\"c2xs4_co\"),   c(\"dtc_lf.txt\",\"c2xs4_rad\"),   c(\"dtc_rt.txt\",\"c2xs4_aut_co\"),   c(\"rco.txt\",\"c2xs4_rco\") ) pts <- c(6,6,6,6,6,8,6,12,14,12,24)  indir <- \"./subtrees/\" outdir <- \"../spantreeorbits/data/\"  for(i in 1:nrow(fnames)) {   obj <- convert_gap_to_r(str_c(indir, fnames[i,1]), pts[i])   assign(fnames[i,2], obj)   save(list = fnames[i,2], file = str_c(outdir, fnames[i,2], \".rda\")) }"},{"path":"https://jefflansing.github.io/spantreeorbits/articles/Pair_Alignment.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Pair_Alignment","text":"goal vignette use common expansion polyhedron π\\pi dual δ\\delta way align π\\pi δ\\delta. (now assume without proof two expansions equal. can see illustration idea expansion tetrahedron eT expansion dual tetrahedron edT, links). (Note number equivalences shown; example: eT aC) following figure shows polyhedra considered, related expansion operators. Figure 1. tree polyhedra names, Conway operators, faces/edges/vertices counts.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/articles/Pair_Alignment.html","id":"aligning-the-tetrahedron-and-its-dual","dir":"Articles","previous_headings":"","what":"Aligning the tetrahedron and its dual","title":"Pair_Alignment","text":"Figure 1a. cube containing tetrahedron (red) dual tetrahedron (green). Figure 1b. rhombic_dodecahedron containing cube (red) octahedron (green). Figure 1c. rhombic_dodecahedron containing tetrahedron (red) dual tetrahedron (green). octahedron aligns two tetrahedra following sense. Call vertices rhombic dodecahedron intersects octahedron f-vertices, intersects tetrahedra t-vertices s-vertices, respectively. Observe Figure 1c f-vertex 2 t-vertices 2 s-vertices neighbors. f-vertex aligns edge tetrahedron 2 t-vertices edge dual tetrahedron 2 s-vertices. easily get following alignment table showing mapping edges tetrahedron edges dual rows table correspond f-vertices, order. $$ \\begin{array}{|oct|tet|dual|}   \\hline   f_1 & t_1t_4 & s_2s_3 \\\\   \\hline   f_2 & t_1t_2 & s_1s_3 \\\\   \\hline   f_3 & t_1t_3 & s_1s_2 \\\\   \\hline   f_4 & t_3t_4 & s_2s_4 \\\\   \\hline   f_5 & t_2t_4 & s_3s_4 \\\\   \\hline   f_6 & t_2t_3 & s_1s_4 \\\\   \\hline \\end{array} $$ Actually, mapping just illustrated already done rhombic dodecahedron constructed.","code":"display_poly(cube, dual = tetrahedron, codual = dual_tetrahedron, jitter = T, zoom = 0.95) rbind(cube$texts, c(tetrahedron$texts, dual_tetrahedron$texts)) %>%    apply(1, function(rw) {str_c(rw, collapse = ',')}) %>% matrix(ncol = 1) #>      [,1]                      #> [1,] \"v1,v2,v3,v4,v5,v6,v7,v8\" #> [2,] \"t1,t2,t3,t4,s1,s2,s3,s4\" display_poly(rhombic_dodecahedron, dual = cube,               codual = octahedron, coscale = 0.8660254, jitter = T) rbind(rhombic_dodecahedron$texts,        c(octahedron$texts, cube$texts),       c(rep(\"__\",6), tetrahedron$texts, dual_tetrahedron$texts)) %>%    apply(1, function(rw) {str_c(rw, collapse = ',')}) %>% matrix(ncol = 1) #>      [,1]                                        #> [1,] \"f1,f2,f3,f4,f5,f6,v1,v2,v3,v4,v5,v6,v7,v8\" #> [2,] \"f1,f2,f3,f4,f5,f6,v1,v2,v3,v4,v5,v6,v7,v8\" #> [3,] \"__,__,__,__,__,__,t1,t2,t3,t4,s1,s2,s3,s4\" display_poly(rhombic_dodecahedron, dual = tetrahedron, codual = dual_tetrahedron, jitter = T) rhombic_dodecahedron$nghmap #>      [,1] [,2] [,3] [,4] #> [1,]    1    4    2    3 #> [2,]    1    2    1    3 #> [3,]    1    3    1    2 #> [4,]    3    4    2    4 #> [5,]    2    4    3    4 #> [6,]    2    3    1    4"},{"path":"https://jefflansing.github.io/spantreeorbits/articles/Pair_Alignment.html","id":"aligning-the-cube-and-the-octahedron","dir":"Articles","previous_headings":"","what":"Aligning the cube and the octahedron","title":"Pair_Alignment","text":"Figure 2a. rhombic_dodecahedron containing cube (red) octahedron (green). Figure 2b. deltoidal icositetrahedron containing rhombic_dodecahedron (red) cuboctahedron (green). Figure 2c. deltoidal icositetrahedron containing cub (red) octahedron (green).","code":"display_poly(rhombic_dodecahedron, dual = cube,               codual = octahedron, coscale = 0.8660254, jitter = T) display_poly(deltoidal_icositetrahedron, dual = rhombic_dodecahedron, scale = 1.01,               codual = cuboctahedron, coscale = 0.9185587, jitter = T) rbind(deltoidal_icositetrahedron$texts,        c(rhombic_dodecahedron$texts[1:6], cuboctahedron$texts, rhombic_dodecahedron$texts[7:14]),       c(octahedron$texts, rep(\"__\",9), rep(\"___\",3), cube$texts),       c(rep(\"__\",15), rep(\"___\",3), tetrahedron$texts, dual_tetrahedron$texts)       ) %>%    apply(1, function(rw) {str_c(rw, collapse = ',')}) %>% matrix(ncol = 1) #>      [,1]                                                                               #> [1,] \"f1,f2,f3,f4,f5,f6,o1,o2,o3,o4,o5,o6,o7,o8,o9,o10,o11,o12,v1,v2,v3,v4,v5,v6,v7,v8\" #> [2,] \"f1,f2,f3,f4,f5,f6,o1,o2,o3,o4,o5,o6,o7,o8,o9,o10,o11,o12,v1,v2,v3,v4,v5,v6,v7,v8\" #> [3,] \"f1,f2,f3,f4,f5,f6,__,__,__,__,__,__,__,__,__,___,___,___,v1,v2,v3,v4,v5,v6,v7,v8\" #> [4,] \"__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,___,___,___,t1,t2,t3,t4,s1,s2,s3,s4\" display_poly(deltoidal_icositetrahedron, dual = cube,               codual = octahedron, coscale = 0.8660254, jitter = T) deltoidal_icositetrahedron$nghmap #>       [,1] [,2] [,3] [,4] #>  [1,]    4    6    1    4 #>  [2,]    4    7    1    5 #>  [3,]    1    6    1    3 #>  [4,]    1    7    1    2 #>  [5,]    2    7    2    5 #>  [6,]    2    5    2    6 #>  [7,]    1    5    2    3 #>  [8,]    3    5    3    6 #>  [9,]    3    6    3    4 #> [10,]    3    8    4    6 #> [11,]    4    8    4    5 #> [12,]    2    8    5    6"},{"path":"https://jefflansing.github.io/spantreeorbits/articles/Pair_Alignment.html","id":"aligning-the-rhombic-dodecahedron-and-the-cuboctahedron","dir":"Articles","previous_headings":"","what":"Aligning the rhombic dodecahedron and the cuboctahedron","title":"Pair_Alignment","text":"Figure 3a. deltoidal icositetrahedron containing rhombic_dodecahedron (red) cuboctahedron (green). Figure 3b. deltoidal tetracontaoctahedron containing deltoidal_icositetrahedron (red) rhombicuboctahedron (green). Figure 3c. deltoidal tetracontaoctahedron containing rhombic_dodecahedron (red) cuboctahedron (green).","code":"display_poly(deltoidal_icositetrahedron, dual = rhombic_dodecahedron, scale = 1.01,               codual = cuboctahedron, coscale = 0.9185587, jitter = T) display_poly(deltoidal_tetracontaoctahedron, dual = deltoidal_icositetrahedron, scale = 1,               codual = rhombicuboctahedron, coscale = 0.9280776, jitter = T) display_poly(deltoidal_tetracontaoctahedron, dual = rhombic_dodecahedron, scale = 1,               codual = cuboctahedron, coscale = 0.9185587, jitter = T) deltoidal_tetracontaoctahedron$nghmap #>       [,1] [,2] [,3] [,4] #>  [1,]    1   10    1    2 #>  [2,]    1   13    2    4 #>  [3,]    4   10    1   11 #>  [4,]    5   13    2    5 #>  [5,]    1    7    3    4 #>  [6,]    2    7    4    7 #>  [7,]    1   12    1    3 #>  [8,]    3   12    3    9 #>  [9,]    2   11    6    7 #> [10,]    2   13    4    5 #> [11,]    2    8    5    6 #> [12,]    5    8    5   12 #> [13,]    6   11    6    8 #> [14,]    3    9    8    9 #> [15,]    3    7    3    7 #> [16,]    3   11    7    8 #> [17,]    6    9    8   10 #> [18,]    4   14   10   11 #> [19,]    4   12    1    9 #> [20,]    4    9    9   10 #> [21,]    6   14   10   12 #> [22,]    5   10    2   11 #> [23,]    5   14   11   12 #> [24,]    6    8    6   12  rbind(deltoidal_tetracontaoctahedron$texts,        c(cuboctahedron$texts, rep(\"__\",9), rep(\"___\",15), rhombic_dodecahedron$texts) ) %>%    apply(1, function(rw) {str_c(rw, collapse = ',')}) %>% matrix(ncol = 1) #>      [,1]                                                                                                                                                                      #> [1,] \"o1,o2,o3,o4,o5,o6,o7,o8,o9,o10,o11,o12,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,f1,f2,f3,f4,f5,f6,v1,v2,v3,v4,v5,v6,v7,v8\" #> [2,] \"o1,o2,o3,o4,o5,o6,o7,o8,o9,o10,o11,o12,__,__,__,__,__,__,__,__,__,___,___,___,___,___,___,___,___,___,___,___,___,___,___,___,f1,f2,f3,f4,f5,f6,v1,v2,v3,v4,v5,v6,v7,v8\""},{"path":"https://jefflansing.github.io/spantreeorbits/articles/Source_Data_Sets.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Source_Data_Sets","text":"goal vignette describe process getting source data sets. sets constitute “raw material” spanning trees “extracted”, explained . spanning trees come pairs, pairs correspond pairs polyhedra, disjoint union edges spanning tree pair forms edges spanning tree polyhedron aligns corresponding polyhedron pair, source data ultimately derives symmetric group order equal vertex count aligning polyhedron. vignette look 3 cases. get symmetric group appropriate order, find subgroup direct product symmetric groups correspond appropriate pair polyhedra, compute cosets subgroup initial symmetric group. computed cosets source data case.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/articles/Source_Data_Sets.html","id":"source-data-for-the-tetrahedron-and-the-dual-tetrahedron-spanning-trees","dir":"Articles","previous_headings":"","what":"Source Data for the Tetrahedron and the Dual Tetrahedron Spanning Trees","title":"Source_Data_Sets","text":"2 candidates source data spanning trees tetrahedron dual tetrahedron. shown Pair_Alignment vignette, symmetric group S6S_6 appropriate case, subgroup S3×S3S_3 \\times S_3. |S6|/|S3×S3|=20|S_{6}|/|S_3 \\times S_3| = 20 cosets. Actually find 2 subgroups; list corresponding cosets side side. group S6S_6 S32⋊C2S_3^2 \\rtimes C_2 immediate subgroup. turn, S32⋊C2S_3^2 \\rtimes C_2 2 copies S3×S3S_3 \\times S_3 immediate subgroups. cosets 2 copies S6S_6 shown evaluating GAP code, also . (whole subgroup lattice S32⋊C2S_3^2 \\rtimes C_2 shown GroupNames.) Note two tables illustrate third assumption; center dividing line helps show . cosets S3×S3S_3 \\times S_3 left cosets S3×S3S_3 \\times S_3 right","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/articles/Source_Data_Sets.html","id":"source-data-for-the-cube-and-the-octahedron-spanning-trees","dir":"Articles","previous_headings":"","what":"Source Data for the Cube and the Octahedron Spanning Trees","title":"Source_Data_Sets","text":"shown Pair_Alignment vignette, symmetric group S12S_{12} appropriate case, corresponding subgroup S7×S5S_7 \\times S_5. |S12|/|S7×S5|=792|S_{12}|/|S_7 \\times S_5| = 792 cosets. group S12S_{12} (GAP calls) S5×S7S_5 \\times S_7 immediate subgroup. random sample cosets subgroup S12S_{12} shown evaluating GAP code, also . (seems inspection cosets appropriate call subgroup S7×S5S_7 \\times S_5.) cosets S7×S5S_7 \\times S_5","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/articles/Source_Data_Sets.html","id":"source-data-for-rhonbic-dodecahedron-and-the-cuboctahedron-spanning-trees","dir":"Articles","previous_headings":"","what":"Source Data for Rhonbic Dodecahedron and the Cuboctahedron Spanning Trees","title":"Source_Data_Sets","text":"shown Pair_Alignment vignette, symmetric group S24S_{24} appropriate case, corresponding subgroup S13×S11S_{13} \\times S_{11}. |S24|/|S13×S11|=2496144|S_{24}|/|S_{13} \\times S_{11}| = 2496144 cosets. group S24S_{24} (GAP calls) S11×S13S_{11} \\times S_{13} immediate subgroup. random sample cosets subgroup S24S_{24} shown . (seems inspection cosets appropriate call subgroup S13×S11S_{13} \\times S_{11}.) cosets S13×S11S_{13} \\times S_{11}","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/articles/Source_Data_Sets.html","id":"finally","dir":"Articles","previous_headings":"","what":"Finally","title":"Source_Data_Sets","text":"three source sets generated locally using GAP code shown, saved disk locally GAP, rows GAP List format. Using text editor capable handling files millions lines, brackets removed produce file csv format. file converted rda format outside package, using code shown ,copied source package.","code":"path <- system.file(\"extdata\", \"s3s3c2.txt\", package = \"spantreeorbits\", mustWork = TRUE) gaptext <- readLines(con = path)  t <- gaptext %>%    str_replace_all(' \\\\.\\\\. ', ', 2, 3, 4, 5,') %>%    str_replace_all('\\\\]\\\\s+\\\\[', ', ') %>%    str_replace_all('(\\\\[|\\\\])', '') %>%    str_c(collapse = ',') %>% str_c('c(', ., ')') oct_source_data <- eval(parse(text = t)) %>%   as.integer() %>% `dim<-`(c(6,2,20)) %>% aperm(c(3,1,2)) save(oct_source_data, file = \"./extdata/oct_source_data.rda\")  vals <- read.csv(file = \"./subtrees/s7s5reps.csv\", header = F) cuboct_source_data <- vals %>% data.matrix() %>% `colnames<-`(NULL) save(cuboct_source_data, file = \"./extdata/cuboct_source_data.rda\")  vals <- read.csv(file = \"./subtrees/s13s11reps.csv\", header = F) rhombicuboct_source_data <- vals %>% data.matrix() %>% `colnames<-`(NULL) save(rhombicuboct_source_data, file = \"./extdata/rhombicuboct_source_data.rda\")"},{"path":"https://jefflansing.github.io/spantreeorbits/articles/spantreeorbits.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Spanning_Tree_Orbits","text":"can install development version spantreeorbits like :","code":"install.packages(\"devtools\") devtools::install_github(\"JeffLansing/spantreeorbits\")"},{"path":"https://jefflansing.github.io/spantreeorbits/articles/spantreeorbits.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Spanning_Tree_Orbits","text":"Consider tetrahedron, self-dual polyhedron 4 vertices, 4 faces, 6 edges. (See: https://dmccooey.com/polyhedra/Tetrahedron.html) use external tools assemble facts polyhedron. Sage GAP, accessed following using Sage Cells. run code shown Sage Cell, click Evaluate button cell. 16 spanning trees (skeleton graph ) tetrahedron 3 edges, connect 4 vertices, without cycles. can look kinds trees 4 vertices follows. two different kinds trees 4 vertices. 16 different spanning trees tetrahedron one two kinds. goal example find group acts set spanning trees tetrahedron produces exactly 2 orbits, contains trees one kind. According document, Table 1, exactly two nets tetrahedron. later might look connections two orbits, two kinds trees, two nets. separate vignette. spanning tree tetrahedron 3 edges, tetrahedron self dual, look facts two sets 3 edges (one set spanning trees tetrahedron, spanning trees dual). use GAP . evaluate GAP code, see symmetric group $ S_6 $ 2 subgroups order 36, called $ S_3 $ x $ S_3 $. , looking representatives right cosets $ S_6 $ either subgroups (shown second one table 20 rows), see relate cosets 2 sets 3 edges mentioned . use R code package explain relation. First label edges two sets canonical way. figure help explain . orbit 1 12 16 trees orbit 1 orbit 2 4 16 trees orbit 2 now figure, 3 parts: Figure 1a. tetrahedron dual, spanning trees, red edges. Figure 1a see get_orbits_of_trees function separated spanning trees kinds: 1a claw ($ K_{1,3} $) graphs.1 4 spanning trees, corresponding 4 vertices tetrahedron. edges figure labeled row index (appropriate half ) neighbor map (rhombic_dodecahedron$nghmap), also correspond points appropriate permutation word, matrix trees. Figure 1b.. tetrahedron dual, spanning trees, red edges. Figure 1b.ii. tetrahedron dual, spanning trees, red edges. Figures 1b.1b.ii contain spanning trees path ($ P_4 $) graphs. left right parts Figures 1b.1b.ii , except tetrahedra duals switched. 6 pairs spanning trees, corresponding $ _4C_2 = 6 $ ways 2 ends path tree can mapped 4 vertices tetrahedron.","code":"trees <- trees_from_perms(rhombic_dodecahedron, reps, 3, 3) orbits <- get_orbits_of_trees(trees, c2xs4_oct$elements, 3, 3) display_tree_pairs(tetrahedron, dual_tetrahedron, rhombic_dodecahedron, trees, orbits[[2]]) display_tree_pairs(tetrahedron, dual_tetrahedron, rhombic_dodecahedron, trees, orbits[[1]][c(1,12,2,11,3,10)]) display_tree_pairs(tetrahedron, dual_tetrahedron, rhombic_dodecahedron, trees, orbits[[1]][c(4,9,5,8,6,7)])"},{"path":"https://jefflansing.github.io/spantreeorbits/articles/spantreeorbits.html","id":"another-example","dir":"Articles","previous_headings":"","what":"Another Example","title":"Spanning_Tree_Orbits","text":"consider cube, 8 vertices, 6 faces, 12 edges, dual polyhedron, octahedron. spanning tree cube touch 8 vertices , 7 edges2; similarly, spanning tree octahedron 5 edges. Since $ 7 + 5 = 12 $, appropriate data source example $ S_{12} $, since order $ S_{12} $ $ 479001600 $ – large vignette example – restrict using cosets $ S_7 \\times S_5 $ $ S_{12} $, data source size $ 479001600 / (5040 * 120) = 792 $, s7s5cosetreps.rda data set package. Using association vertices edges cube octahedron (deltoidal_icositetrahedron$nghmap) get 384 spanning trees case, using automorphism group cuboctahedron (see Automorphism Groups vignette) get 11 orbits. look , say, first tree orbit, see compares favorably results Peter Turney3, agrees octahedron 11 different nets, even though 4 different tree graphs span octahedron. Figure 2a. cube dual, spanning trees, red edges. Figure 2a 4 pairs octahedron spanned $ P_6 $ path graph. Figure 2b. cube dual, spanning trees, red edges. Figure 2b 3 pairs octahedron spanned $ star_{1,1,3} $ graph. Figure 2c. cube dual, spanning trees, red edges. Figure 2c top 2 pairs octahedron spanned $ star_{1,2,2} $ graph, bottom pair octahedron spanned $ H_1 $ graph left, pair octahedron spanned $ star_{1,1,1,2} $ graph right. Since investigating matching spanning trees cube dual, look tree graphs span cube. 23 tree graphs 8 vertices: Note4 23 trees, 5 span cube: first, third, fourth trees first row figure, seventh tree second row, first 2 trees third row figure. Following ISGCI nomenclature 5 trees named, order, P8,star1,2,4,star2,2,3,H3,1,12,2H1,1,11,3H1 \\begin{array}{lllll} P_8, & star_{1,2,4}, & star_{2,2,3}, & H_3, & _{1,1}^{2,2}H_1, & \\text{} _{1,1}^{1,3}H_1 \\\\ \\end{array}  Note5 Reviewing briefly, hypothesis 384 spanning trees cube 384 spanning trees octahedron “associated”, associated concatenation, way $ S_7\\times S_5 $ . trees looking elements $ S_{12} $. orbits looking created applying cuboctahedral group, created Automorphism Groups vignette, 12 vertex spanning trees. Within orbit, 24 48 elements structurally indistinguishable (spectrum). take elements apart, Figure 2 , start see distinctions. Looking first element orbit representative, see tree graph left part representative, together tree graph right part, distinguishes (one exception) 11 orbits. go look tree graphs complements (shown green Figure 2), fact orbits completely characterized 4 small graphs, shown table . $$ \\begin{array}{|c|c|c|c|c|}   n & \\text{cube} & \\text{co-cube} & \\text{oct} & \\text{co-oct} \\\\   \\hline   1 & P_8 & P_2\\cup 2P_3 & P_6 & \\textit{twin-}C_5 \\\\   \\hline   2 & star_{1,2,4} & P_3\\cup P_4\\cup K_1 & P_6 & X_{37} \\\\   \\hline   6 & H_3 & P_6\\cup 2K_1 & P_6 & 2K_3+e \\\\   \\hline   9 & P_8 & 2P_2\\cup P_4 & P_6 & \\textit{twin-}C_5 \\\\   \\hline   3 & star_{1,2,4} & P_3\\cup P_4\\cup K_1 & star_{1,1,3} & \\overline{X_5} \\\\   \\hline   5 & _{1,3}^{1,1}H_1 & P_6\\cup 2K_1 & star_{1,1,3} & X_{171} \\\\   \\hline   11 & P_8 & P_4\\cup 2P_2 & star_{1,1,3} & X_{45} \\\\   \\hline   7 & star_{2,2,3} & P_5\\cup P_2\\cup K_1 & star_{1,2,2} & antenna \\\\   \\hline   8 & star_{1,2,4} & P_5\\cup P_2\\cup K_1 & star_{1,2,2} & \\overline{X_5} \\\\   \\hline   18 & ^{1,1}_{2,2}H_1 & P_6\\cup 2K_1 & H_1 & \\textit{co-twin-house} \\\\   \\hline   13 & ^{1,1}_{2,2}H_1 & C_4\\cup K_2\\cup 2K_1 & star_{1,1,1,2} & X_{170}\\textit{-e}\\cup K_1 \\\\   \\hline \\end{array} $$ can see small graphs ISGCI, example antenna co-twin-house. look geometrically Figure 4 . Figure 4. cube dual, small graphs.","code":"trees <- trees_from_perms(deltoidal_icositetrahedron, s7s5cosetreps, 7, 5) nrow(trees) #> [1] 384 orbits <- get_orbits_of_trees(trees, c2xs4_co$elements, 7, 5) length(orbits) #> [1] 11 display_tree_pairs(cube, octahedron, deltoidal_icositetrahedron, trees, rbind(orbits[[1]][1],orbits[[2]][1],orbits[[5]][1],orbits[[8]][1])) display_tree_pairs(cube, octahedron, deltoidal_icositetrahedron, trees, rbind(orbits[[3]][1],orbits[[4]][1],orbits[[10]][1])) display_tree_pairs(cube, octahedron, deltoidal_icositetrahedron, trees, rbind(orbits[[6]][1],orbits[[7]][1],orbits[[9]][1],orbits[[11]][1])) lapply(orbits, length) %>% unlist() #lengths #>  [1] 24 48 48 48 24 48 48 24 24 24 24 lapply(orbits, function(v) v[1]) %>% unlist() #representatives #>  [1]  1  2  3  5  6  7  8  9 18 11 13 display_tree_pairs(cube, octahedron, deltoidal_icositetrahedron, trees, c(5,6,18,13), split = TRUE)"},{"path":"https://jefflansing.github.io/spantreeorbits/articles/spantreeorbits.html","id":"towards-a-third-example","dir":"Articles","previous_headings":"","what":"Towards A Third Example","title":"Spanning_Tree_Orbits","text":"consider rhombic dodecahedron, 14 vertices, 12 faces, 24 edges, dual polyhedron, cuboctahedron. spanning tree rhombic dodecahedron touch 14 vertices , 13 edges; similarly, spanning tree cuboctahedron 11 edges. Since $ 13 + 11 = 24 $, appropriate data source example $ S_{24} $, since order $ S_{12} $ $ 620448401733239439360000 $ restrict using cosets $ S_13 \\times S_11 $ $ S_{24} $, data source size $ 620448401733239439360000 / (6227020800 * 39916800) = 2496144 $, s13s11cosetreps.rda data set package. Furthermore, following bit code takes far long, vignette, result computed offline available s13s11trees.rda data set package.","code":"s13s1trees <- trees_from_perms(deltoidal_tetracontaoctahedron, s13s11cosetreps, 13, 11)"},{"path":"https://jefflansing.github.io/spantreeorbits/articles/spantreeorbits.html","id":"vectors-over-gf2-and-the-neighbor-map","dir":"Articles","previous_headings":"Towards A Third Example","what":"Vectors over GF(2) and the Neighbor Map","title":"Spanning_Tree_Orbits","text":"first spanning tree pairs, vector edge labels: show particular pair actually pair spanning trees: red: rhombic_dodecahedron, green: cuboctahedron Next apply particular tree pair appropriate neighbor map. shown Pair_Alignment vignette, neighbor map representation way polyhedron dual aligned, within larger polyhedron contains , dual larger polyhedron. case, larger polyhedron deltoidal icositetrahedron, dual rhombicuboctahedron. can see alignment works zooming deltoidal tetracontaoctahedron, whic contains deltoidal icositetrahedron rhombicuboctahedron: f v: rhombic dodecahedron vertices, o: cuboctahedron vertices, r: rhombicuboctahedron vertices see , e.g., r5r_5 aligns neighbors f1f_1 v1v_1 neighbors o3o_3 o4o_4, r21r_{21} aligns f6f_6 v8v_8 o10o_{10} o12o_{12}. 55 2121 right hand part example tree pair, o3o_3 o4o_4, o10o_{10} o12o_{12} green edges spanning tree figure, previously shown. general, applying tree pair neighbor map means using values tree pair select rows map, left part tree pair selecting left part map, similarly right parts. show example next. entries neighbor map grayed can identified listing column (0 1) , map. gives representation tree pair vector zeros ones. first spanning tree pairs, vector GL(2): Since 24 entries vector, can “naturally” encoded single integer, follows. representation, example tree pair becomes integer: 12051472=2419129113671 12051472 = 2^{4} 19^{1} 29^{1} 1367^{1} Clearly $ 2^{24} $ integers, check GAP module $ GF(2)^{24} $ exactly size. Summarizing, shown 5 different representations spanning tree pair: 2-part vector indices vertices particular polyhedron “3d” rgl view tree pair shaded neighbor map vector elements $ GL(2) $ integer $ 0 $ $ 2^{n} $, exclusive, $ n $ length vector representation 1. 331776 spanning tree pairs rhombic dodecahedron cuboctahedron use slightly less 2 percent representations.","code":"# Load the 331776 spanning tree pairs for the rhombic dodecahedron # and its dual, the cuboctahedron data(s13s11trees, package = \"spantreeorbits\")  #Look at one of the pairs, e.g., the twenty-first one tree <- s13s11trees[21,]  tree %>% `dim<-`(c(1,24)) %>% kableExtra::kbl(caption = \"The first of the spanning tree pairs, as a vector of edge labels: \") %>% kableExtra::column_spec(c(1:24), width = \"2em\") %>%    kableExtra::row_spec(1, align = 'c') %>%    kableExtra::column_spec(c(1,14), border_left = T) %>%    kableExtra::column_spec(c(13,24), border_rig = T) get_spanning_trees <- function(pair) {   radixs <- nmdtco[pair[1:13],1:2] %>% t() %>% c()   cuixs <- nmdtco[pair[14:24],3:4] %>% t() %>% c()      rad <- list(verts = rhombic_dodecahedron$verts,                       texts = rhombic_dodecahedron$texts,                       segments = rhombic_dodecahedron$verts[radixs,])   cu <- list(verts = cuboctahedron$verts,                      texts = cuboctahedron$texts,                      segments = cuboctahedron$verts[cuixs,])   list(rad = rad, cu = cu) }  nmdtco <- deltoidal_tetracontaoctahedron$nghmap  sptrs <- get_spanning_trees(tree)  display_poly(deltoidal_icositetrahedron, dual = sptrs$rad, codual = sptrs$cu,              show_axes = F, show_segments = F, show_labels = F) display_poly(deltoidal_tetracontaoctahedron, zoom = 2/5) # Make the neighbor map easier to read ttco <- cbind(   str_c('f',nmdtco[,1]),   str_c('v',nmdtco[,2] - 6),   str_c('o',nmdtco[,3]),   str_c('o',nmdtco[,4]) )  # A helper function for colors: get_colors <- function(rw) {   colors <- rep('gray50',24)   colors[rw] <- 'white'   colors }  # Show the table: ttco %>%`rownames<-`(str_c('r', 1:24)) %>% kableExtra::kbl() %>%    kableExtra::kable_styling(full_width = F, position = \"center\") %>%    kableExtra::column_spec(c(1:4), width = \"2em\") %>%   kableExtra::add_header_above(c(\" \" = 1, \"0\" = 2, \"1\" = 2)) %>%   kableExtra::row_spec(1:24, align = 'c') %>%   kableExtra::column_spec(1, bold = T) %>%    kableExtra::column_spec(2:3, background = get_colors(tree[1:13])) %>%   kableExtra::column_spec(4:5, background = get_colors(tree[14:24])) get_01vec <- function(tree) {   rw <- tree[1:13]   v <- rep(1,24)   v[rw] <- 0   v }  vec <- get_01vec(tree)  vec %>% `dim<-`(c(1,24)) %>% kableExtra::kbl(caption = \"The first of the spanning tree pairs, as a vector over GL(2): \") %>% kableExtra::column_spec(c(1:24), width = \"1.2em\") %>%   kableExtra::row_spec(1, align = 'c') powers_of_two <- sapply(0:23, function(n) 2^n)  vec_to_int <- function(tree) {   powers_of_two[which(vec == 1)] %>% sum() }  int <- vec_to_int(vec)  # Just for fun, also show the factors: factors <- gmp::factorize(int) %>% table() %>% str_c(names(.),'^{',., '}', collapse = ' ') rep <- str_c(int, ' = ', factors)"},{"path":[]},{"path":[]},{"path":"https://jefflansing.github.io/spantreeorbits/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeff Lansing. Author, maintainer.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lansing J (2025). spantreeorbits: Generate Orbits Spanning Trees. R package version 0.1.0, https://github.com/JeffLansing/spantreeorbits.","code":"@Manual{,   title = {spantreeorbits: Generate Orbits for Spanning Trees},   author = {Jeff Lansing},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/JeffLansing/spantreeorbits}, }"},{"path":"https://jefflansing.github.io/spantreeorbits/index.html","id":"spantreeorbits","dir":"","previous_headings":"","what":"Generate Orbits for Spanning Trees","title":"Generate Orbits for Spanning Trees","text":"goal spantreeorbits use algebra generate orbits spanning trees polyhedra.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Orbits for Spanning Trees","text":"can install development version spantreeorbits like :","code":"install.packages(\"devtools\") devtools::install_github(\"JeffLansing/spantreeorbits\")"},{"path":"https://jefflansing.github.io/spantreeorbits/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generate Orbits for Spanning Trees","text":"simple example presented Get Started page.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/as_es.html","id":null,"dir":"Reference","previous_headings":"","what":"as_es A helper function to retrieve edge indices from an incidence matrix — as_es","title":"as_es A helper function to retrieve edge indices from an incidence matrix — as_es","text":"as_es helper function retrieve edge indices incidence matrix","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/as_es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as_es A helper function to retrieve edge indices from an incidence matrix — as_es","text":"","code":"as_es(mx)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/as_es.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as_es A helper function to retrieve edge indices from an incidence matrix — as_es","text":"mx incidence matrix","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/as_es.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"as_es A helper function to retrieve edge indices from an incidence matrix — as_es","text":"list edge indices","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/as_incidence_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"as_incidence_matrix The incidence matrix imxof a graph has a row for each vertex and a column for each edge, with imx[v,e] ==1 if vertex v is incident upon edge e, and 0 otherwise. — as_incidence_matrix","title":"as_incidence_matrix The incidence matrix imxof a graph has a row for each vertex and a column for each edge, with imx[v,e] ==1 if vertex v is incident upon edge e, and 0 otherwise. — as_incidence_matrix","text":"as_incidence_matrix incidence matrix imxof graph row vertex column edge, imx[v,e] ==1 vertex v incident upon edge e, 0 otherwise.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/as_incidence_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as_incidence_matrix The incidence matrix imxof a graph has a row for each vertex and a column for each edge, with imx[v,e] ==1 if vertex v is incident upon edge e, and 0 otherwise. — as_incidence_matrix","text":"","code":"as_incidence_matrix(elist, vertices)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/as_incidence_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as_incidence_matrix The incidence matrix imxof a graph has a row for each vertex and a column for each edge, with imx[v,e] ==1 if vertex v is incident upon edge e, and 0 otherwise. — as_incidence_matrix","text":"elist edges graph vertices vertices graph","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/as_incidence_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"as_incidence_matrix The incidence matrix imxof a graph has a row for each vertex and a column for each edge, with imx[v,e] ==1 if vertex v is incident upon edge e, and 0 otherwise. — as_incidence_matrix","text":"incidence matrix graph","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/as_incidence_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"as_incidence_matrix The incidence matrix imxof a graph has a row for each vertex and a column for each edge, with imx[v,e] ==1 if vertex v is incident upon edge e, and 0 otherwise. — as_incidence_matrix","text":"","code":"el <- matrix(c(1,1,1,2,3,4), ncol = 2) vs <- 1:4 amx <- edgelist_to_adjmat(el) imx <- as_incidence_matrix(el, vs) stopifnot(amx %*% imx == 1)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/canonicalize.html","id":null,"dir":"Reference","previous_headings":"","what":"canonicalize Canonicalize an edgelist — canonicalize","title":"canonicalize Canonicalize an edgelist — canonicalize","text":"canonicalize Canonicalize edgelist","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/canonicalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"canonicalize Canonicalize an edgelist — canonicalize","text":"","code":"canonicalize(el)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/canonicalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"canonicalize Canonicalize an edgelist — canonicalize","text":"el edge list","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/canonicalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"canonicalize Canonicalize an edgelist — canonicalize","text":"edgelist canonical form","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/canonicalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"canonicalize Canonicalize an edgelist — canonicalize","text":"","code":"el <- rbind(c(4,3),c(2,1)) cc <- canonicalize(el) stopifnot(cc[1,1] <= cc[1,2] & cc[1,1] <= cc[2,1])"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Cube — cube","title":"Cube — cube","text":"Cube","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cube — cube","text":"","code":"cube"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/cube.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cube — cube","text":"object class list length 5.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/cube.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cube — cube","text":"cube data structure. verts vertex coordinates texts vertex labels segments edges cube faces faces","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/cuboctahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Cuboctahedron — cuboctahedron","title":"Cuboctahedron — cuboctahedron","text":"Cuboctahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/cuboctahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cuboctahedron — cuboctahedron","text":"","code":"cuboctahedron"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/cuboctahedron.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cuboctahedron — cuboctahedron","text":"object class list length 6.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/cuboctahedron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cuboctahedron — cuboctahedron","text":"cuboctahedron data structure. verts vertex coordinates texts vertex labels segments edges cuboctahedron cu_faces quadrilateral faces oct_faces triangular faces","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/deltoidal_icositetrahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Deltoidal Icositetrahedron — deltoidal_icositetrahedron","title":"Deltoidal Icositetrahedron — deltoidal_icositetrahedron","text":"Deltoidal Icositetrahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/deltoidal_icositetrahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deltoidal Icositetrahedron — deltoidal_icositetrahedron","text":"","code":"deltoidal_icositetrahedron"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/deltoidal_icositetrahedron.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Deltoidal Icositetrahedron — deltoidal_icositetrahedron","text":"object class list length 6.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/deltoidal_icositetrahedron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deltoidal Icositetrahedron — deltoidal_icositetrahedron","text":"deltoidal_icositetrahedron data structure. verts vertex coordinates nghmap map edges contained rhombic_dodecahedron edges dual cuboctahedron texts vertex labels egments edges deltoidal_icositetrahedron \"faces faces","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/deltoidal_tetracontaoctahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Deltoidal Tetracontaoctahedron — deltoidal_tetracontaoctahedron","title":"Deltoidal Tetracontaoctahedron — deltoidal_tetracontaoctahedron","text":"Deltoidal Tetracontaoctahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/deltoidal_tetracontaoctahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deltoidal Tetracontaoctahedron — deltoidal_tetracontaoctahedron","text":"","code":"deltoidal_tetracontaoctahedron"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/deltoidal_tetracontaoctahedron.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Deltoidal Tetracontaoctahedron — deltoidal_tetracontaoctahedron","text":"object class list length 6.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/deltoidal_tetracontaoctahedron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deltoidal Tetracontaoctahedron — deltoidal_tetracontaoctahedron","text":"deltoidal_tetracontaoctahedron data structure. verts vertex coordinates nghmap map edges contained rhombic_dodecahedron edges contained cuboctahedron texts vertex labels segments edges deltoidal_tetracontaoctahedron faces faces","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/depth_first.html","id":null,"dir":"Reference","previous_headings":"","what":"depth_first A way of detecting cycles in a graph — depth_first","title":"depth_first A way of detecting cycles in a graph — depth_first","text":"depth_first way detecting cycles graph","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/depth_first.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"depth_first A way of detecting cycles in a graph — depth_first","text":"","code":"depth_first(ajmx)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/depth_first.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"depth_first A way of detecting cycles in a graph — depth_first","text":"ajmx adjacency matrix graph","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/depth_first.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"depth_first A way of detecting cycles in a graph — depth_first","text":"longest path initial vertex","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/depth_first.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"depth_first A way of detecting cycles in a graph — depth_first","text":"","code":"el <- matrix(c(1,1,1,2,3,4), ncol = 2) amx <- edgelist_to_adjmat(el) df <- depth_first(amx) stopifnot(length(df) == 4)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/dual_tetrahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Dual Tetrahedron — dual_tetrahedron","title":"Dual Tetrahedron — dual_tetrahedron","text":"Dual Tetrahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/dual_tetrahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dual Tetrahedron — dual_tetrahedron","text":"","code":"dual_tetrahedron"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/dual_tetrahedron.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dual Tetrahedron — dual_tetrahedron","text":"object class list length 5.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/dual_tetrahedron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dual Tetrahedron — dual_tetrahedron","text":"dual tetrahedron data structure. verts vertex coordinates texts vertex labels segments edges dual tetrahedron faces faces","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"edgelist A refinement of the base function ","title":"edgelist A refinement of the base function ","text":"edgelist refinement base function \"matrix(ncol = 2)\"","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"edgelist A refinement of the base function ","text":"","code":"edgelist(edgevec)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"edgelist A refinement of the base function ","text":"edgevec vector general edgelist (undirected graph) column-order","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"edgelist A refinement of the base function ","text":"edgelist canonical form, means (undirected graph ) vertex index first column less equal vertex index second column.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/edgelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"edgelist A refinement of the base function ","text":"","code":"require(magrittr) #> Loading required package: magrittr pg <- igraph::make_graph(\"Petersen\") elist <- pg %>% igraph::as_edgelist() ncelist <- elist identical(ncelist, elist) #expect TRUE #> [1] TRUE for(i in c(2,3,5,7,11,13)) {   tmp <- elist[i,1]   ncelist[[i,1]] <- elist[i,2] # put second first   ncelist[[i,2]] <- tmp # put first second } identical(ncelist, elist) #expect FALSE #> [1] FALSE ncpg <- ncelist %>% igraph::graph_from_edgelist(directed = FALSE) igraph::is_isomorphic_to(ncpg, pg) #expect TRUE #> [1] TRUE celist <- ncelist %>% as.numeric() %>% edgelist() identical(celist, elist) #expect TRUE #> [1] TRUE"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/edgelist_to_adjmat.html","id":null,"dir":"Reference","previous_headings":"","what":"edgelist_to_adjmat Convert an edgelist representation of a graph into an adjacency matrix representation of the same graph — edgelist_to_adjmat","title":"edgelist_to_adjmat Convert an edgelist representation of a graph into an adjacency matrix representation of the same graph — edgelist_to_adjmat","text":"edgelist_to_adjmat Convert edgelist representation graph adjacency matrix representation graph","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/edgelist_to_adjmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"edgelist_to_adjmat Convert an edgelist representation of a graph into an adjacency matrix representation of the same graph — edgelist_to_adjmat","text":"","code":"edgelist_to_adjmat(edgelist)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/edgelist_to_adjmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"edgelist_to_adjmat Convert an edgelist representation of a graph into an adjacency matrix representation of the same graph — edgelist_to_adjmat","text":"edgelist edgelist","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/edgelist_to_adjmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"edgelist_to_adjmat Convert an edgelist representation of a graph into an adjacency matrix representation of the same graph — edgelist_to_adjmat","text":"adjacency list","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/edgelist_to_adjmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"edgelist_to_adjmat Convert an edgelist representation of a graph into an adjacency matrix representation of the same graph — edgelist_to_adjmat","text":"","code":"el <- matrix(c(1,1,1,2,3,4), ncol = 2) amx <- edgelist_to_adjmat(el) stopifnot(rowSums(amx) == colSums(amx))"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/gen_span_trees.html","id":null,"dir":"Reference","previous_headings":"","what":"gen_span_trees Generate the spanning trees of a polygon — gen_span_trees","title":"gen_span_trees Generate the spanning trees of a polygon — gen_span_trees","text":"gen_span_trees Generate spanning trees polygon","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/gen_span_trees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gen_span_trees Generate the spanning trees of a polygon — gen_span_trees","text":"","code":"gen_span_trees(elist, vertices, cmb)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/gen_span_trees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gen_span_trees Generate the spanning trees of a polygon — gen_span_trees","text":"elist edgelist polygon vertices vertices tree (symbolic names) cmb superset spanning trees, example: combinations nrow(edgelist) things taken length(vertices) -1 time","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/gen_span_trees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gen_span_trees Generate the spanning trees of a polygon — gen_span_trees","text":"matrix spanning trees, one per row","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/gen_span_trees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"gen_span_trees Generate the spanning trees of a polygon — gen_span_trees","text":"","code":"cmb <- combn(6,3) tcmb <- t(cmb) scmb <- t(apply(cmb, 2, function(cl) setdiff(1:6, cl))) tinfo <- gen_span_trees(rhombic_dodecahedron$nghmap[,1:2], letters[1:4], tcmb) sinfo <- gen_span_trees(rhombic_dodecahedron$nghmap[,3:4], letters[1:4], scmb) stopifnot(identical(tinfo$is, sinfo$is))"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Get a Cube Translate the cube coordinates from the polyhedronisme OBJ output into R code — get_cube","title":"Title Get a Cube Translate the cube coordinates from the polyhedronisme OBJ output into R code — get_cube","text":"Title Get Cube Translate cube coordinates polyhedronisme OBJ output R code","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Get a Cube Translate the cube coordinates from the polyhedronisme OBJ output into R code — get_cube","text":"","code":"get_cube()"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Get a Cube Translate the cube coordinates from the polyhedronisme OBJ output into R code — get_cube","text":"list describing cube","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Get a Cube Translate the cube coordinates from the polyhedronisme OBJ output into R code — get_cube","text":"","code":"cu <- get_cube() stopifnot(nrow(cu$vertices) == 8)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_cuboctahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Get a Cuboctrahedron Translate the cuboctahedron coordinates from the polyhedronisme OBJ output into R code — get_cuboctahedron","title":"Title Get a Cuboctrahedron Translate the cuboctahedron coordinates from the polyhedronisme OBJ output into R code — get_cuboctahedron","text":"Title Get Cuboctrahedron Translate cuboctahedron coordinates polyhedronisme OBJ output R code","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_cuboctahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Get a Cuboctrahedron Translate the cuboctahedron coordinates from the polyhedronisme OBJ output into R code — get_cuboctahedron","text":"","code":"get_cuboctahedron()"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_cuboctahedron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Get a Cuboctrahedron Translate the cuboctahedron coordinates from the polyhedronisme OBJ output into R code — get_cuboctahedron","text":"list describing cuboctahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_cuboctahedron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Get a Cuboctrahedron Translate the cuboctahedron coordinates from the polyhedronisme OBJ output into R code — get_cuboctahedron","text":"","code":"co <- get_cuboctahedron() stopifnot(nrow(co$vertices) == 12)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_deltoidal_icositetrahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Get a Deltoidal Icositetrahedron Translate the deltoidal_icositetrahedron coordinates from the polyhedronisme OBJ output into R code — get_deltoidal_icositetrahedron","title":"Title Get a Deltoidal Icositetrahedron Translate the deltoidal_icositetrahedron coordinates from the polyhedronisme OBJ output into R code — get_deltoidal_icositetrahedron","text":"Title Get Deltoidal Icositetrahedron Translate deltoidal_icositetrahedron coordinates polyhedronisme OBJ output R code","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_deltoidal_icositetrahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Get a Deltoidal Icositetrahedron Translate the deltoidal_icositetrahedron coordinates from the polyhedronisme OBJ output into R code — get_deltoidal_icositetrahedron","text":"","code":"get_deltoidal_icositetrahedron()"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_deltoidal_icositetrahedron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Get a Deltoidal Icositetrahedron Translate the deltoidal_icositetrahedron coordinates from the polyhedronisme OBJ output into R code — get_deltoidal_icositetrahedron","text":"list describing deltoidal_icositetrahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_deltoidal_icositetrahedron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Get a Deltoidal Icositetrahedron Translate the deltoidal_icositetrahedron coordinates from the polyhedronisme OBJ output into R code — get_deltoidal_icositetrahedron","text":"","code":"dit <- get_deltoidal_icositetrahedron() stopifnot(nrow(dit$vertices) == 26)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_deltoidal_tetracontaoctahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Get a Deltoidal Tetracontaoctahedron Translate the deltoidal_tetracontaoctahedron coordinates from the polyhedronisme OBJ output into R code — get_deltoidal_tetracontaoctahedron","title":"Title Get a Deltoidal Tetracontaoctahedron Translate the deltoidal_tetracontaoctahedron coordinates from the polyhedronisme OBJ output into R code — get_deltoidal_tetracontaoctahedron","text":"Title Get Deltoidal Tetracontaoctahedron Translate deltoidal_tetracontaoctahedron coordinates polyhedronisme OBJ output R code","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_deltoidal_tetracontaoctahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Get a Deltoidal Tetracontaoctahedron Translate the deltoidal_tetracontaoctahedron coordinates from the polyhedronisme OBJ output into R code — get_deltoidal_tetracontaoctahedron","text":"","code":"get_deltoidal_tetracontaoctahedron()"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_deltoidal_tetracontaoctahedron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Get a Deltoidal Tetracontaoctahedron Translate the deltoidal_tetracontaoctahedron coordinates from the polyhedronisme OBJ output into R code — get_deltoidal_tetracontaoctahedron","text":"list describing deltoidal_tetracontaoctahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_deltoidal_tetracontaoctahedron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Get a Deltoidal Tetracontaoctahedron Translate the deltoidal_tetracontaoctahedron coordinates from the polyhedronisme OBJ output into R code — get_deltoidal_tetracontaoctahedron","text":"","code":"dtc <- get_deltoidal_tetracontaoctahedron() stopifnot(nrow(dtc$vertices) == 50)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_dual_tetrahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Get a Dual Tetrahedron Translate the dual tetrahedron coordinates from the polyhedronisme OBJ output into R code — get_dual_tetrahedron","title":"Title Get a Dual Tetrahedron Translate the dual tetrahedron coordinates from the polyhedronisme OBJ output into R code — get_dual_tetrahedron","text":"Title Get Dual Tetrahedron Translate dual tetrahedron coordinates polyhedronisme OBJ output R code","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_dual_tetrahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Get a Dual Tetrahedron Translate the dual tetrahedron coordinates from the polyhedronisme OBJ output into R code — get_dual_tetrahedron","text":"","code":"get_dual_tetrahedron()"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_dual_tetrahedron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Get a Dual Tetrahedron Translate the dual tetrahedron coordinates from the polyhedronisme OBJ output into R code — get_dual_tetrahedron","text":"list describing dual_tetrahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_dual_tetrahedron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Get a Dual Tetrahedron Translate the dual tetrahedron coordinates from the polyhedronisme OBJ output into R code — get_dual_tetrahedron","text":"","code":"dtet <- get_dual_tetrahedron() stopifnot(nrow(dtet$vertices) == 4)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_octahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Get an Octahedron Translate the octahedron coordinates from the polyhedronisme OBJ output into R code — get_octahedron","title":"Title Get an Octahedron Translate the octahedron coordinates from the polyhedronisme OBJ output into R code — get_octahedron","text":"Title Get Octahedron Translate octahedron coordinates polyhedronisme OBJ output R code","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_octahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Get an Octahedron Translate the octahedron coordinates from the polyhedronisme OBJ output into R code — get_octahedron","text":"","code":"get_octahedron()"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_octahedron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Get an Octahedron Translate the octahedron coordinates from the polyhedronisme OBJ output into R code — get_octahedron","text":"list describing octahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_octahedron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Get an Octahedron Translate the octahedron coordinates from the polyhedronisme OBJ output into R code — get_octahedron","text":"","code":"oct <- get_octahedron() stopifnot(nrow(oct$vertices) == 6)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_orbits_of_trees.html","id":null,"dir":"Reference","previous_headings":"","what":"get_orbits_of_trees — get_orbits_of_trees","title":"get_orbits_of_trees — get_orbits_of_trees","text":"get_orbits_of_trees","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_orbits_of_trees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_orbits_of_trees — get_orbits_of_trees","text":"","code":"get_orbits_of_trees(sts, ops, lf, rt, orb_only = TRUE)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_orbits_of_trees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_orbits_of_trees — get_orbits_of_trees","text":"sts matrix pairs aligned spanning trees polyhedon dual, represented set edge labels ops elements permutation group, regarded symmetry operators lf number edges spanning tree polyhedron. rt number edges spanning tree polyhedron. orb_only = TRUE false multiplication table also returned,","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_orbits_of_trees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_orbits_of_trees — get_orbits_of_trees","text":"list orbits referring spanning trees row indices","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_orbits_of_trees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_orbits_of_trees — get_orbits_of_trees","text":"","code":"cmb <- combn(6,3) tcmb <- t(cmb) scmb <- t(apply(cmb, 2, function(cl) setdiff(1:6, cl))) tinfo <- gen_span_trees(rhombic_dodecahedron$nghmap[,1:2], letters[1:4], tcmb) sinfo <- gen_span_trees(rhombic_dodecahedron$nghmap[,3:4], letters[1:4], scmb) ops <- rbind(c(1,2,3,4,5,6), c(5,6,2,1,4,3)) orbits <- get_orbits_of_trees(cbind(tinfo$sts, sinfo$sts), ops, 3, 3) #> Warning: NULL matrix stopifnot(length(orbits) == 5) #> Error: length(orbits) == 5 is not TRUE"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_perms.html","id":null,"dir":"Reference","previous_headings":"","what":"get_perms — get_perms","title":"get_perms — get_perms","text":"get_perms","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_perms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_perms — get_perms","text":"","code":"get_perms(actions)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_perms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_perms — get_perms","text":"actions matrix permutations, one per row","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_perms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_perms — get_perms","text":"character vector permutations cycles","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_perms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_perms — get_perms","text":"","code":"mx <- rbind(c(1,2,3),c(1,3,2)) v <- get_perms(mx) stopifnot(nrow(mx) == length(v))"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_rhombic_dodecahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Get a Cuboctrahedron Translate the cuboctahedron coordinates from the polyhedronisme OBJ output into R code — get_rhombic_dodecahedron","title":"Title Get a Cuboctrahedron Translate the cuboctahedron coordinates from the polyhedronisme OBJ output into R code — get_rhombic_dodecahedron","text":"Title Get Cuboctrahedron Translate cuboctahedron coordinates polyhedronisme OBJ output R code","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_rhombic_dodecahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Get a Cuboctrahedron Translate the cuboctahedron coordinates from the polyhedronisme OBJ output into R code — get_rhombic_dodecahedron","text":"","code":"get_rhombic_dodecahedron()"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_rhombic_dodecahedron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Get a Cuboctrahedron Translate the cuboctahedron coordinates from the polyhedronisme OBJ output into R code — get_rhombic_dodecahedron","text":"list describing cuboctahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_rhombic_dodecahedron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Get a Cuboctrahedron Translate the cuboctahedron coordinates from the polyhedronisme OBJ output into R code — get_rhombic_dodecahedron","text":"","code":"rad <- get_rhombic_dodecahedron() stopifnot(nrow(rad$vertices) == 14)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_rhombicuboctahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Get a Rhombicuboctahedron Translate the rhombicuboctahedron coordinates from the polyhedronisme OBJ output into R code — get_rhombicuboctahedron","title":"Title Get a Rhombicuboctahedron Translate the rhombicuboctahedron coordinates from the polyhedronisme OBJ output into R code — get_rhombicuboctahedron","text":"Title Get Rhombicuboctahedron Translate rhombicuboctahedron coordinates polyhedronisme OBJ output R code","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_rhombicuboctahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Get a Rhombicuboctahedron Translate the rhombicuboctahedron coordinates from the polyhedronisme OBJ output into R code — get_rhombicuboctahedron","text":"","code":"get_rhombicuboctahedron()"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_rhombicuboctahedron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Get a Rhombicuboctahedron Translate the rhombicuboctahedron coordinates from the polyhedronisme OBJ output into R code — get_rhombicuboctahedron","text":"list describing rhombicuboctahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_rhombicuboctahedron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Get a Rhombicuboctahedron Translate the rhombicuboctahedron coordinates from the polyhedronisme OBJ output into R code — get_rhombicuboctahedron","text":"","code":"co <- get_rhombicuboctahedron() stopifnot(nrow(co$vertices) == 24)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Convert an edgelist to a set of unordered pairs — get_set","title":"Title Convert an edgelist to a set of unordered pairs — get_set","text":"Title Convert edgelist set unordered pairs","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Convert an edgelist to a set of unordered pairs — get_set","text":"","code":"get_set(info)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title Convert an edgelist to a set of unordered pairs — get_set","text":"info edgelist converted","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Convert an edgelist to a set of unordered pairs — get_set","text":"set unordered pairs (.e., 2-element sets)","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Convert an edgelist to a set of unordered pairs — get_set","text":"","code":"s <- get_set(matrix(c(1,2,3,4,5,6), ncol = 2)) stopifnot(length(s) == 3)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_tetrahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Get a Tetrahedron Translate the tetrahedron coordinates from the polyhedronisme OBJ output into R code — get_tetrahedron","title":"Title Get a Tetrahedron Translate the tetrahedron coordinates from the polyhedronisme OBJ output into R code — get_tetrahedron","text":"Title Get Tetrahedron Translate tetrahedron coordinates polyhedronisme OBJ output R code","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_tetrahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Get a Tetrahedron Translate the tetrahedron coordinates from the polyhedronisme OBJ output into R code — get_tetrahedron","text":"","code":"get_tetrahedron()"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_tetrahedron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Get a Tetrahedron Translate the tetrahedron coordinates from the polyhedronisme OBJ output into R code — get_tetrahedron","text":"list describing tetrahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/get_tetrahedron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Get a Tetrahedron Translate the tetrahedron coordinates from the polyhedronisme OBJ output into R code — get_tetrahedron","text":"","code":"tet <- get_tetrahedron() stopifnot(nrow(tet$vertices) == 4)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/octahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Octahedron — octahedron","title":"Octahedron — octahedron","text":"Octahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/octahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Octahedron — octahedron","text":"","code":"octahedron"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/octahedron.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Octahedron — octahedron","text":"object class list length 5.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/octahedron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Octahedron — octahedron","text":"octahedron data structure. verts vertex coordinates texts vertex labels segments edges octahedron faces faces","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/rhombic_dodecahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Rhombic_Dodecahedron — rhombic_dodecahedron","title":"Rhombic_Dodecahedron — rhombic_dodecahedron","text":"Rhombic_Dodecahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/rhombic_dodecahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rhombic_Dodecahedron — rhombic_dodecahedron","text":"","code":"rhombic_dodecahedron"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/rhombic_dodecahedron.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Rhombic_Dodecahedron — rhombic_dodecahedron","text":"object class list length 6.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/rhombic_dodecahedron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rhombic_Dodecahedron — rhombic_dodecahedron","text":"rhombic_dodecahedron data structure. verts vertex coordinates nghmap map edges contained tetrahedron edges dual texts vertex labels segments edges rhombic_dodecahedron faces faces","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/rhombicuboctahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Rhombicuboctahedron — rhombicuboctahedron","title":"Rhombicuboctahedron — rhombicuboctahedron","text":"Rhombicuboctahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/rhombicuboctahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rhombicuboctahedron — rhombicuboctahedron","text":"","code":"rhombicuboctahedron"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/rhombicuboctahedron.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Rhombicuboctahedron — rhombicuboctahedron","text":"object class list length 7.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/rhombicuboctahedron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rhombicuboctahedron — rhombicuboctahedron","text":"rhombicuboctahedron data structure. info numbers faces, edges, vertices verts vertex coordinates texts vertex labels segments edges rhombicuboctahedron edges edgelist indices vertices cu_faces quadrilateral faces oct_faces triangular faces","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/tetrahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"Tetrahedron — tetrahedron","title":"Tetrahedron — tetrahedron","text":"Tetrahedron","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/tetrahedron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tetrahedron — tetrahedron","text":"","code":"tetrahedron"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/tetrahedron.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tetrahedron — tetrahedron","text":"object class list length 5.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/tetrahedron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tetrahedron — tetrahedron","text":"tetrahedron data structure. verts vertex coordinates texts vertex labels segments edges tetrahedron faces faces","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/trees_from_perms.html","id":null,"dir":"Reference","previous_headings":"","what":"trees_from_perms Extract spanning trees from a set of permutations — trees_from_perms","title":"trees_from_perms Extract spanning trees from a set of permutations — trees_from_perms","text":"trees_from_perms Extract spanning trees set permutations","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/trees_from_perms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"trees_from_perms Extract spanning trees from a set of permutations — trees_from_perms","text":"","code":"trees_from_perms(poly, perms, lf, rt, trees_only = TRUE)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/trees_from_perms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"trees_from_perms Extract spanning trees from a set of permutations — trees_from_perms","text":"poly polyhedron data structure neighbor map perms set permutations word form lf left subset columns perms rt right subset columns perms trees_only default(TRUE) TRUE, return subset input permutations result paired spanning trees. FALSE, return paired spanning trees, also return indices input perms resulted spanning tree.Note one parts paired spanning trees may rotated.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/trees_from_perms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"trees_from_perms Extract spanning trees from a set of permutations — trees_from_perms","text":"set spanning trees word form","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/trees_from_perms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"trees_from_perms Extract spanning trees from a set of permutations — trees_from_perms","text":"","code":"data(rhombic_dodecahedron, package = \"spantreeorbits\") reps <- rbind(c(1,2,3,4,5,6),c(1,2,3,4,6,5),c(1,2,4,3,5,6),c(1,2,4,3,6,5)) s6trees <- trees_from_perms(rhombic_dodecahedron, reps, 3, 3) stopifnot(nrow(s6trees) == 2) #> Error: nrow(s6trees) == 2 is not TRUE"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/which_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Find the index of a row in a matrix — which_row","title":"Title Find the index of a row in a matrix — which_row","text":"Title Find index row matrix","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/which_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Find the index of a row in a matrix — which_row","text":"","code":"which_row(mx, row)"},{"path":"https://jefflansing.github.io/spantreeorbits/reference/which_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title Find the index of a row in a matrix — which_row","text":"mx 2d array values row 1d row values","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/which_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Find the index of a row in a matrix — which_row","text":"index requested row array, 0 found.","code":""},{"path":"https://jefflansing.github.io/spantreeorbits/reference/which_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Find the index of a row in a matrix — which_row","text":"","code":"wh <- which_row(matrix(c(1,2,3,4), ncol = 2), c(2,4)) stopifnot(wh == 2)"}]
